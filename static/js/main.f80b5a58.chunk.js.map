{"version":3,"sources":["NavBar.js","GameContainer/noteData.js","GameContainer/Blocks.js","GameContainer/GuessButtonsContainer.js","GameContainer/StatusContainer.js","GameContainer/loadMusicLoopData.js","GameContainer/index.js","About.js","HowToPlay.js","App.js","index.js"],"names":["NavBarBtn","link","name","exact","to","className","activeClassName","NavBar","scaleFormula","chordProgressionFormula","chordFormula","chordDegreeFormula","tones","musicalNotes","forEach","octave","note","push","toneGen","diceRoll","n","Math","floor","random","chordGen","root","rtScale","chordInv","chord","i","map","noteData","scale","scaleIntervals","generatedScale","interval","tone","scaleGen","chords","chordRoot","mysteryNote","noteSeed","chordDegree","mysteryNoteGen","chordProgression","chordDegreeData","chordDeg","setupChordDegree","DISPLAY_NAMES","Block","measure","number","handleBlockClick","displayName","classNameM","onClick","Blocks","mysteryBlockDisplay","key","GuessButton","deg","handleGuessClick","isPlaying","value","disabled","clicked","GuessButtons","data","StatusBoard","displayText","ScoreBoard","scoreBoard","avgAttempts","toFixed","ceil","percent","StatusContainer","padSynth","Tone","PolySynth","FMSynth","harmonicity","modulationIndex","oscillator","type","envelope","attack","decay","sustain","release","modulation","modulationEnvelope","toMaster","bassSynth","MonoSynth","modulationType","filter","Q","rolloff","volume","filterEnvelope","baseFrequency","octaves","guessSynth","playbackSynth","Synth","loadSingleChord","Transport","scheduleOnce","time","triggerAttackRelease","UserButton","children","handleClick","GameContainer","useState","correct","total","setScoreBoard","degreeBtnData","setDegreeBtnData","setMeasure","setIsPlaying","setMysteryBlockDisplay","setDisplayText","musicData","useRef","isCorrectRef","timeSignature","bpm","newKey","useCallback","newKeyData","setMusicRef","setupGuessButtons","useEffect","setTimeout","current","setIsCorrectRef","isCorrect","setupScoreBoard","num","prevState","attempts","chordDegreedata","answer","degree","playAfterCorrect","loadAndPlayTransport","cancel","setPlaying","loop","Sequence","beat","Draw","schedule","dispose","start","stop","createLoop","padData","noteLength","loadChords","playTransport","singleLoop","createSingleLoop","clickedDegreeData","updatedState","About","HowToPlay","App","basename","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f80b5a58.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst NavBarBtn = ({ link, name }) => (\n  <NavLink exact to={link} className=\"link\" activeClassName=\"linkSelected\">\n    {name}\n  </NavLink>\n);\n\nconst NavBar = () => (\n  <div className=\"navbar\">\n    <span className=\"logo\">MuziKa!</span>\n    <div className=\"linkContainer\">\n      <NavBarBtn link=\"/\" name=\"Game\" />\n      <NavBarBtn link=\"/howtoplay\" name=\"How to Play\" />\n      <NavBarBtn link=\"/about\" name=\"About\" />\n    </div>\n  </div>\n);\n\nexport default NavBar;\n","const scaleFormula = { major: [0, 2, 2, 1, 2, 2, 2] };\nconst chordProgressionFormula = [0, 3, 4, 0];\nconst chordFormula = [-3, 0, 2, 4, 7];\n// prettier-ignore\nconst chordDegreeFormula = [\"R/8\", \"♭9\", \"9\", \"♭10\", \"10\", \"11\", \"o12/TT\", \"12\", \"♭6\", \"6\", \"♭7\", \"7\"];\n\n//Generates the data of a 6 octave musical 'keyboard' readable  by Tone.js\nconst toneGen = () => {\n  //prettier-ignore\n  let musicalNotes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  let octaves = [1, 2, 3, 4, 5, 6, 7];\n  let tones = [];\n\n  octaves.forEach(octave =>\n    musicalNotes.forEach(note => tones.push(`${note}${octave}`))\n  );\n\n  return tones;\n};\n\nlet tones = toneGen();\n\nconst diceRoll = n => {\n  return Math.floor(Math.random() * n);\n};\n\n//Generates 'random' mystery note\nconst mysteryNoteGen = root => {\n  let noteSeed = diceRoll(11);\n  let note = tones[root + noteSeed + 36];\n  let chordDegree = chordDegreeFormula[noteSeed];\n\n  return {\n    note,\n    chordDegree\n  };\n};\n\nconst chordProgressionGen = (rtScale, chdProgForm) =>\n  chdProgForm.map(chordRoot => chordGen(chordRoot, rtScale));\n\n//Generates a chord with random voicing, for a variety of voice leadings\nconst chordGen = (root, rtScale) => {\n  let chordInv = diceRoll(3);\n  let chord = [];\n  for (let i = 0; i <= 2; i++) {\n    chord.push(chordFormula[chordInv + i] + root);\n  }\n  return chord.map(note => rtScale[note + 14]);\n};\n\nconst scaleGen = (root, scaleIntervals, tones) => {\n  let generatedScale = [];\n  //starting at root, tone 'walks' up scale for 6 octaves\n  for (let i = 1, tone = root; i < 6; i++) {\n    scaleIntervals.forEach(interval => {\n      tone += interval;\n      generatedScale.push(tones[tone]);\n    });\n    tone++;\n  }\n  return generatedScale;\n};\n\nconst setupChordDegree = (root, chordDegreeFormula) =>\n  chordDegreeFormula.map((chordDeg, i) => ({\n    name: chordDeg,\n    note: tones[root + i + 36]\n  }));\n\nconst noteData = () => {\n  let root = diceRoll(11);\n  let scale = scaleGen(root, scaleFormula.major, tones);\n  let chords = chordProgressionGen(scale, chordProgressionFormula);\n  let mysteryNote = mysteryNoteGen(root);\n  let chordProgression = chordProgressionFormula;\n  let chordDegreeData = setupChordDegree(root, chordDegreeFormula);\n  return {\n    scale,\n    chords,\n    chordProgression,\n    mysteryNote,\n    chordDegreeData\n  };\n};\n\nexport default noteData;\n","import React from \"react\";\nimport \"../App.css\";\n\n// prettier-ignore\nconst DISPLAY_NAMES = [\"I\", \"IV\", \"V\", \"I\", null, \"mystery\"];\n\nconst Block = ({ measure, number, handleBlockClick, displayName }) => {\n  let classNameM = number === 5 && displayName !== \"???\" ? \"mysteryBlock\" : \"\";\n  return (\n    <div\n      onClick={() => handleBlockClick(number)}\n      className={measure === number ? \"musicBlockActive\" : \"musicBlock\"}\n    >\n      <span className={classNameM}>{displayName}</span>\n    </div>\n  );\n};\n\nconst Blocks = ({ measure, handleBlockClick, mysteryBlockDisplay }) =>\n  DISPLAY_NAMES.map((displayName, i) => {\n    displayName = displayName === \"mystery\" ? mysteryBlockDisplay : displayName;\n    return displayName ? (\n      <Block\n        key={i}\n        number={i}\n        {...{ handleBlockClick, measure, displayName }}\n      />\n    ) : null;\n  });\n\nexport default Blocks;\n","import React from \"react\";\n\nconst GuessButtons = ({ data, handleGuessClick, isPlaying }) =>\n  data.map(deg => (\n    <GuessButton key={deg.name} {...{ deg, handleGuessClick, isPlaying }} />\n  ));\n\nconst GuessButton = ({ deg, handleGuessClick, isPlaying }) => (\n  <button\n    value={deg.name}\n    disabled={deg.disabled || isPlaying}\n    clicked={deg.clicked}\n    onClick={() => handleGuessClick(deg)}\n  >\n    {deg.name}\n  </button>\n);\n\nexport default GuessButtons;\n","import React from \"react\";\n\nconst StatusBoard = ({ displayText }) => (\n  <div className=\"statusBoard\">\n    <span> {displayText} </span>\n  </div>\n);\n\nconst ScoreBoard = ({ scoreBoard }) => (\n  <div className=\"scoreBoard\">\n    <span>{scoreBoard.avgAttempts.toFixed(1)}</span>\n    <span>{Math.ceil(scoreBoard.percent * 100)}%</span>\n  </div>\n);\n\nconst StatusContainer = ({ scoreBoard, displayText }) => (\n  <div className=\"statusContainer\">\n    <StatusBoard {...{ displayText }} />\n    <ScoreBoard {...{ scoreBoard }} />\n  </div>\n);\n\nexport default StatusContainer;\n","import Tone from \"tone\";\n\nconst padSynth = new Tone.PolySynth(3, Tone.FMSynth, {\n  harmonicity: 3.01,\n  modulationIndex: 14,\n  oscillator: {\n    type: \"triangle\"\n  },\n  envelope: {\n    attack: 0.2,\n    decay: 0.3,\n    sustain: 0.1,\n    release: 1.2\n  },\n  modulation: {\n    type: \"square\"\n  },\n  modulationEnvelope: {\n    attack: 0.01,\n    decay: 0.5,\n    sustain: 0.2,\n    release: 0.1\n  }\n}).toMaster();\nconst bassSynth = new Tone.MonoSynth({\n  oscillator: {\n    type: \"fmsquare5\",\n    modulationType: \"triangle\",\n    modulationIndex: 2,\n    harmonicity: 0.501\n  },\n  filter: {\n    Q: 1,\n    type: \"lowpass\",\n    rolloff: -24\n  },\n  envelope: {\n    attack: 0.01,\n    decay: 0.1,\n    sustain: 0.2,\n    release: 2\n  },\n  volume: -10,\n  filterEnvelope: {\n    attack: 0.01,\n    decay: 0.1,\n    sustain: 0.8,\n    release: 1.5,\n    baseFrequency: 50,\n    octaves: 4.4\n  }\n}).toMaster();\nconst guessSynth = new Tone.MonoSynth({\n  oscillator: {\n    type: \"square\"\n  },\n  filter: {\n    Q: 2,\n    type: \"lowpass\",\n    rolloff: -12\n  },\n  envelope: {\n    attack: 0.005,\n    decay: 3,\n    sustain: 0,\n    release: 0.45\n  },\n  filterEnvelope: {\n    attack: 0.001,\n    decay: 0.32,\n    sustain: 0.9,\n    release: 3,\n    baseFrequency: 700,\n    octaves: 2.3\n  }\n}).toMaster();\nconst playbackSynth = new Tone.PolySynth(3, Tone.Synth, {\n  oscillator: {\n    type: \"sawtooth\"\n  },\n  volume: -16,\n  filter: {\n    Q: 1,\n    type: \"lowpass\",\n    rolloff: -12\n  },\n  envelope: {\n    attack: 0.1,\n    decay: 0.1,\n    sustain: 0.9,\n    release: 0.3\n  }\n}).toMaster();\n\nexport const loadChords = padData => {\n  let noteLength = \"2n\";\n  Tone.Transport.scheduleOnce(time => {\n    guessSynth.triggerAttackRelease(padData.mysteryNote.note, noteLength, time);\n  }, \"5:0\");\n\n  padData.chords.map((chord, i) =>\n    Tone.Transport.scheduleOnce(time => {\n      padSynth.triggerAttackRelease(chord, noteLength, time);\n    }, `${i}:0`)\n  );\n  padData.chordProgression.map((degree, i) =>\n    Tone.Transport.scheduleOnce(time => {\n      bassSynth.triggerAttackRelease(\n        padData.scale[degree + 7],\n        noteLength,\n        time\n      );\n    }, `${i}:0`)\n  );\n};\n\nexport const createLoop = (\n  setMeasure,\n  setPlaying,\n  isCorrectRef,\n  playAfterCorrect\n) => {\n  let loop = new Tone.Sequence(\n    (time, beat) => {\n      Tone.Draw.schedule(() => {\n        setMeasure(beat);\n        if (beat === 0) {\n          setPlaying(true);\n        }\n        if (beat === 7) {\n          setMeasure(\"off\");\n          loop.dispose();\n          isCorrectRef.current ? playAfterCorrect() : setPlaying(false);\n        }\n      }, time);\n    },\n    [0, 1, 2, 3, 4, 5, 6, 7, \"off\"],\n    \"1m\"\n  );\n  loop.start(0).stop(\"8m\");\n};\n\nexport const loadSingleChord = chord => {\n  Tone.Transport.scheduleOnce(time => {\n    playbackSynth.triggerAttackRelease(chord, \"2n\", time);\n  }, \"0:0\");\n};\n\nexport const createSingleLoop = setMeasure => {\n  let singleLoop = new Tone.Sequence(\n    (time, beat) => {\n      if (beat === 1) {\n        setMeasure(\"off\");\n        singleLoop.dispose();\n      }\n    },\n    [0, 1],\n    \"1m\"\n  );\n  singleLoop.start(0).stop(\"2m\");\n};\n","import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport \"../App.css\";\nimport Tone from \"tone\";\nimport noteData from \"./noteData\";\nimport Blocks from \"./Blocks\";\nimport GuessButtons from \"./GuessButtonsContainer\";\nimport StatusContainer from \"./StatusContainer\";\n// prettier-ignore\nimport { createLoop, createSingleLoop, loadChords, loadSingleChord } from \"./loadMusicLoopData\";\n\nconst UserButton = ({ children, handleClick, isPlaying }) => (\n  <button disabled={isPlaying} onClick={handleClick}>\n    {children}\n  </button>\n);\n\nconst GameContainer = () => {\n  // prettier-ignore\n  const [scoreBoard, setScoreBoard] = useState({correct: 0, total: 0, percent: \"\", avgAttempts: 0});\n  const [degreeBtnData, setDegreeBtnData] = useState([]);\n  const [measure, setMeasure] = useState(\"off\");\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [mysteryBlockDisplay, setMysteryBlockDisplay] = useState(\"???\");\n  const [displayText, setDisplayText] = useState(\n    \"Game Initiated: Click 'PLAY' hear the musical progression. Then guess a degree\"\n  );\n  const musicData = useRef({});\n  const isCorrectRef = useRef(false);\n\n  Tone.Transport.timeSignature = [3, 4];\n  Tone.Transport.bpm.value = 400;\n\n  //useCallback invoked to prevent infinite looping from intial useEffect\n  const newKey = useCallback(() => {\n    let newKeyData = noteData();\n    setMusicRef(newKeyData);\n    setupGuessButtons(\n      newKeyData.chordDegreeData,\n      newKeyData.mysteryNote.chordDegree,\n      setDegreeBtnData\n    );\n  }, []);\n\n  //useEffect to initialize game\n  useEffect(() => {\n    newKey();\n    setTimeout(() => {\n      setIsPlaying(false);\n    }, 900);\n  }, [newKey]);\n\n  const setMusicRef = data => {\n    musicData.current = data;\n  };\n\n  const setIsCorrectRef = isCorrect => {\n    isCorrectRef.current = isCorrect;\n  };\n\n  const setupScoreBoard = num => {\n    setScoreBoard(prevState => {\n      prevState.correct += num;\n      prevState.total++;\n      prevState.attempts++;\n      prevState.percent = prevState.correct / prevState.total;\n      if (num === 1) {\n        prevState.avgAttempts = prevState.total / prevState.correct;\n      }\n\n      return prevState;\n    });\n  };\n\n  const setupGuessButtons = (chordDegreedata, answer, setDegreeBtnData) => {\n    let chordDegreeDataUpdated = chordDegreedata.map(degree => ({\n      name: degree.name,\n      correct: answer === degree.name,\n      clicked: \"false\",\n      note: degree.note\n    }));\n    setDegreeBtnData(chordDegreeDataUpdated);\n  };\n\n  const handleCorrect = () => {\n    setDisplayText(\"Correct!\");\n    setIsCorrectRef(true);\n    loadAndPlayTransport();\n    setMysteryBlockDisplay(musicData.current.mysteryNote.chordDegree);\n    setupScoreBoard(1);\n    newKey();\n  };\n\n  const playAfterCorrect = () => {\n    setDisplayText(\"New Key, Guess a degree\");\n    setMysteryBlockDisplay(\"???\");\n    setIsCorrectRef(false);\n    loadAndPlayTransport();\n  };\n\n  const handleIncorrect = degree => {\n    setDisplayText(`${degree.name} is incorrect`);\n    loadSingleChord(degree.note);\n    setupScoreBoard(0);\n    playTransport();\n  };\n\n  const handleChangeKey = () => {\n    setDisplayText(\"Key Changed\");\n    newKey();\n    loadAndPlayTransport();\n  };\n\n  const loadAndPlayTransport = () => {\n    Tone.Transport.cancel();\n    setMeasure(0);\n    createLoop(setMeasure, setIsPlaying, isCorrectRef, playAfterCorrect);\n    loadChords(musicData.current);\n    playTransport();\n  };\n\n  const playTransport = (time = \"+0.2\") => {\n    Tone.Transport.stop();\n    Tone.Transport.start(time);\n  };\n\n  const handleBlockClick = number => {\n    if (isPlaying) {\n      return;\n    }\n    Tone.Transport.cancel();\n    setMeasure(number);\n    let chord = [];\n    chord =\n      number !== 5\n        ? musicData.current.chords[number]\n        : [musicData.current.mysteryNote.note];\n    createSingleLoop(setMeasure);\n    loadSingleChord(chord);\n    playTransport();\n  };\n\n  const disableWrongDegreeBtn = name => {\n    setDegreeBtnData(prevState => {\n      let updatedState = [...prevState];\n      updatedState.map(deg => {\n        deg.disabled = deg.name === name ? (deg.disabled = true) : deg.disabled;\n        return deg;\n      });\n      return updatedState;\n    });\n  };\n\n  const handleGuessClick = (clickedDegreeData, isPlaying) => {\n    if (isPlaying) {\n      return;\n    } else if (clickedDegreeData.correct) {\n      handleCorrect(clickedDegreeData);\n      setMeasure(0);\n    } else {\n      handleIncorrect(clickedDegreeData);\n      disableWrongDegreeBtn(clickedDegreeData.name);\n    }\n  };\n\n  return (\n    <div className=\"gameWrapper\">\n      <StatusContainer {...{ scoreBoard, displayText }} />\n      <div className=\"userBtns\">\n        <UserButton handleClick={loadAndPlayTransport} isPlaying={isPlaying}>\n          PLAY\n        </UserButton>\n        <UserButton handleClick={handleChangeKey} isPlaying={isPlaying}>\n          KEY CHANGE\n        </UserButton>\n      </div>\n      <div className=\"musicBlockBoard\">\n        <Blocks {...{ measure, handleBlockClick, mysteryBlockDisplay }} />\n      </div>\n      <div className=\"answerBoard\">\n        <GuessButtons\n          data={degreeBtnData}\n          {...{ handleGuessClick, isPlaying }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GameContainer;\n","import React from \"react\";\n\nconst About = () => (\n  <div className=\"textContainer\">\n    <h3>About</h3>\n    <p>This program was created by Matthew Crompton</p>\n  </div>\n);\n\nexport default About;\n","import React from \"react\";\n\nconst HowToPlay = () => (\n  <div className=\"textContainer\">\n    <h3>What is MuziKa?</h3>\n    <p>\n      MuziKa! is an ear-training program designed to help improve the player's\n      harmonic comprehension.\n    </p>\n    <h3>Objective</h3>\n    <p>\n      The objective is to identify the mysterious tone (marked as '???'). Listen\n      to the chord progression and try to determine how the final tone is\n      harmonically related to the root chord (tonic).\n    </p>\n    <h3>How to Play</h3>\n    <p>\n      Press the 'PLAY' button and a I-IV-V-I chord progression will sound\n      followed by a single tone. At the bottom of the game board are 12 buttons\n      representing the 12 possible chord degrees. The player must identify the\n      correct chord degree of the 'mystery tone' (marked as '???') in relation\n      to the progression's musical key. Play the chord progression as many times\n      as necessary to internalize the scale of the key in relation to the\n      mystery tone. To hear a single instance of any of the chords or the\n      mystery tone click on its corresponding block. For a new key and mystery\n      tone, select 'KEY CHANGE'. At the top right of the game board is an\n      average of attempts followed by a percentage of correct.\n    </p>\n  </div>\n);\n\nexport default HowToPlay;\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport NavBar from \"./NavBar\";\nimport GameContainer from \"./GameContainer\";\nimport About from \"./About\";\nimport HowToPlay from \"./HowToPlay\";\n\nconst App = () => (\n  <div className=\"app\">\n    <HashRouter basename=\"/\">\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/\" component={GameContainer} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/howtoplay\" component={HowToPlay} />\n      </Switch>\n    </HashRouter>\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}